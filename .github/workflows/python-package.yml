# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "Nano-AutoGrad" ]
  pull_request:
    branches: [ "Nano-AutoGrad" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: app

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10","3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest torch
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
  # name of the jobs
  app:
    # type OS used to build top on ubuntu because is has already docker and docker-compose pre-installed 
    runs-on: ubuntu-20.04
    # define the Step to run in this JOB  
    steps:
      -
        name: checking repo code 
        uses: actions/checkout@v3
      -
        name: running Builiding Container
        run: |
          docker-compose run --rm -p 8000:8000 app sh -c "exit"
          echo "Application Run Test Passed"
# in this Job building Docker image and push into docker-hub with GIT_AUTH_TOKEN to secure repo access
# this job will be depends on building-django-app 
  Docker-Setup:
    needs: app
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Auth to docker hub     
      -
        name: Docker-login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Buidling and pushing image to docker repo       
      - 
        name: build and push images to DOCKERHUB
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: younessbg/app:latset
          secrets: |
            GIT_AUTH_TOKEN= ${{ secrets.GIT_AUTH }}

  GitHub-Container-Registry:
    needs: ["app","Docker-Setup"]
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write

    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_AUTH }}
      - 
        name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - 
        name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/deep-matter/app:latset
          labels: 'latset'